local h_speed = 1.25
local v_speed = -1

local jump_takeoff_speed = 12

function init(self)
	--msg.post("/Camera#Component", "acquire_camera_focus")
	msg.post(".", "acquire_input_focus")

	self.state = standing	

	self.velocity = vmath.vector3(0, 0, 0)

	self.correction = vmath.vector3()
	
	self.ground_contact = true
	
	self.move_input = 0
	self.facing = 0

	self.anim = nil
end

function final(self)
	msg.post(".", "release_input_focus")
end

local function play_animation(self, anim)
	-- only play animations which are not already playing
	if self.anim ~= anim then
		-- tell the sprite to play the animation
		msg.post("#Sprite", "play_animation", {id = anim})
		-- remember which animation is playing
		self.anim = anim
	end
end

local function update_animations(self)
	-- make sure the player character faces the right way
	sprite.set_hflip("#Sprite", self.facing < 0)

	-- make sure the right animation is playing
	if self.ground_contact then
		if self.velocity.x == 0 then
			play_animation(self, hash("Stand"))
		else
			play_animation(self, hash("Walk"))
		end
	else
		if self.velocity.y ~= 0 then
			play_animation(self, hash("Jump"))
		end
	end
end

function update(self, dt)
	local target_h_speed = self.move_input * h_speed
	local target_v_speed = v_speed 
	
	self.velocity.x = target_h_speed 
	self.velocity.y = self.velocity.y + target_v_speed

	go.set_position(go.get_position() + self.velocity)

	update_animations(self)

	-- reset volatile state
	self.correction = vmath.vector3()
	self.move_input = 0
	self.ground_contact = false
end

local function handle_obstacle_contact(self, normal, distance)
	-- project the correction vector onto the contact normal
	-- (the correction vector is the 0-vector for the first contact point)
	local proj = vmath.dot(self.correction, normal)
	-- calculate the compensation we need to make for this contact point
	local comp = (distance - proj) * normal
	-- add it to the correction vector
	self.correction = self.correction + comp
	-- apply the compensation to the player character
	go.set_position(go.get_position() + comp)
	-- check if the normal points enough up to consider the player standing on the ground
	-- (0.7 is roughly equal to 45 degrees deviation from pure vertical direction)
	if normal.y > 0.7 then
		self.ground_contact = true
	end
	-- project the velocity onto the normal
	proj = vmath.dot(self.velocity, normal)
	-- if the projection is negative, it means that some of the velocity points towards the contact point
	if proj < 0 then
		-- remove that component in that case
		self.velocity = self.velocity - proj * normal
	end
end

function on_message(self, message_id, message, sender)
	-- check if we received a contact point message
	if message_id == hash("contact_point_response") then
		-- check that the object is something we consider an obstacle
		if message.group == hash("Obstacle") then
			handle_obstacle_contact(self, message.normal, message.distance)
		end
	end
end

local function jump(self)
	-- only allow jump from ground
	-- (extend this with a counter to do things like double-jumps)
	if self.ground_contact then
		-- set take-off speed
		self.velocity.y = jump_takeoff_speed
		-- play animation
		play_animation(self, hash("Jump"))
	end
end

local function abort_jump(self)
	-- cut the jump short if we are still going up
	if self.velocity.y > 0 then
		self.velocity.y = 0
	end
end


function on_input(self, action_id, action)
	if action_id == hash("left") then

		self.move_input = -action.value

		if self.move_input == -1 then
			self.facing = self.move_input
		end
				
	elseif action_id == hash("right") then

		self.move_input = action.value

		if self.move_input == 1 then
			self.facing = self.move_input
		end

	elseif action_id == hash("accept") then

		if action.pressed then
			jump(self)
		elseif action.released then
			abort_jump(self)
		end
										
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
